
/*
// Equivalent C code:
const short N = 10;
short a[10] = {2, 2, 29, 24, 13, 4, 7, 14, 22, 30};
short b[10] = {16, 19, 0, 26, 24, 7, 4, 20, 9, 25};
short c[10];
void main() {
	short* pa;
	short* pb;
	short* pc;
	short* pae;
	short* pce;
	short e;
	for(
		pb = b+N-1, pc = c, pa = a, pbe = b-1;
		pb != pbe;
		pb--, pc++, pa++
	){
		*pc = *pa - *pb;
	}
	for(
		pa = a, e = 0xffff, pae = a + N;
		pa != pae;
		pa++
	){
		if(*pa > e){
			e = *pa;
		}
	}
}

	
*/

.data
10
2, 2, 29, 24, 13, 4, 7, 14, 22, 30 //niz a
16, 19, 0, 26, 24, 7, 4, 20, 9, 25 //niz b
0,0,0,0,0,0,0,0,0,0 //prazan niz c
0xffff
.text
/*
	R7 - predstavlja N i sluzi za brojanje
	R0 - predstavlja pokazivac na niz a, 
	R1 - u prvom delu predstavlja pokazivac na niz b, u drugom dijelu rjrsenje 
	R2 - u prvom delu predstavlja pokazivac na niz c
	R3 - pomocna prom
	R5 - pomocna prom
	R6- prvi dio pomocni registar, na kraju predstavlja mjesto prikaza za e
*/
main:
	ld R7,R0
	mov R6,R7 // za kasnsnije koriscenje 
	inc R0,R0 // pocetak a
	add R1,R0,R7 // pocetak b
	add R2,R1,R7 // 21 posetak c
	dec R1,R2 // kraj b
	inc R7,R7
	for_prvi:
		dec R7,R7
		jmpz end_prvi
	for_prvi_tijelo:
		ld R3,R0	// R3- vrijednost iz adrese R0,niz a[]
		ld R4,R1	//R4- vrijednost sa adrese R1, niz b[]
		sub R5,R3,R4	// R5= *pa - *pb
		st R5,R2      // cuvanje R5 na mjestu R2
	
	for_prvi_brojac:
		inc R0,R0 	// pa++ predhodna adresa niza a[]
		dec R1,R1	// pb-- predhodna adresa niza b[]
		inc R2,R2	// pc++ predhodna adresa niza c[]
		jmp for_prvi	

	end_prvi:
		sub R0,R0,R6 // posto je R0 na 11 iz proslog brojaca,smanjujemo na 1 da bi dosli na pocetak niza
		mov R7,R6 // broj el u R7
		inc R7,R7 // radi prvog smanjnenja
		ld R6,R2

	for_drugi:
		dec R7,R7
		jmpz end

	for_drugi_tijelo:
		ld R3,R0	//prvi clan niza a[]
		sub R4,R6,R3	//uporedjivanje sa e
		jmps dodjela

	for_drugi_brojac:
		inc R0,R0	//pa++ povecanje pokazivca niza a[]
		jmp for_drugi

	dodjela:
		mov R6,R3	// dodjela ako je clan niza a manjipod e
		jmp for_drugi_brojac

end:
	jmp end
